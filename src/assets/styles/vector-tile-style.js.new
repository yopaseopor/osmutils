/**
 * Vector Tile Style Function for OpenLayers
 * Implements a clean, working vector tile style based on MapTiler Basic style
 */

// Main style function
window.vectorTileStyle = function(feature, resolution) {
    const layer = feature.get('layer') || 'unknown';
    const type = feature.getGeometry().getType();
    const styles = [];
    
    // Define colors and styles
    const colors = {
        water: '#a5bfdd',
        land: '#f8f4f0',
        park: '#d8e8c8',
        forest: '#b8d9a9',
        building: '#d4d4d4',
        road: {
            motorway: '#ff8753',
            trunk: '#fff2b2',
            primary: '#fff2b2',
            secondary: '#ffffff',
            tertiary: '#ffffff',
            residential: '#ffffff',
            service: '#ffffff',
            path: '#ffffff',
            track: '#ffffff',
            pedestrian: '#ffffff'
        },
        boundary: {
            national: '#000000',
            administrative: '#9e9e9e',
            protected_area: '#2d5f2d'
        },
        text: {
            primary: '#000000',
            secondary: '#555555',
            light: '#ffffff',
            highlight: '#1a73e8',
            water: '#5d8fbd'
        },
        textHalo: {
            light: 'rgba(255, 255, 255, 0.75)',
            dark: 'rgba(0, 0, 0, 0.75)'
        }
    };
    
    // Style based on layer type
    try {
        // Water
        if (layer === 'water') {
            styles.push(new ol.style.Style({
                fill: new ol.style.Fill({
                    color: colors.water
                })
            }));
        }
        
        // Landuse
        else if (layer === 'landuse') {
            const landuseType = feature.get('class') || 'default';
            let fillColor = colors.land;
            
            if (landuseType.includes('park') || landuseType.includes('garden')) fillColor = colors.park;
            else if (landuseType.includes('forest') || landuseType.includes('wood')) fillColor = colors.forest;
            
            styles.push(new ol.style.Style({
                fill: new ol.style.Fill({
                    color: fillColor
                })
            }));
        }
        
        // Buildings
        else if (layer === 'building') {
            styles.push(new ol.style.Style({
                fill: new ol.style.Fill({
                    color: colors.building
                }),
                stroke: new ol.style.Stroke({
                    color: '#999999',
                    width: 0.5
                })
            }));
        }
        
        // Roads
        else if (layer === 'transportation') {
            const roadType = feature.get('class') || 'service';
            const roadColor = colors.road[roadType] || colors.road.service;
            
            // Base road style
            styles.push(new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: roadColor,
                    width: 4,
                    lineCap: 'round',
                    lineJoin: 'round'
                })
            }));
            
            // Add road label if available
            const name = feature.get('name');
            if (name && resolution < 20) {
                styles.push(new ol.style.Style({
                    text: new ol.style.Text({
                        text: name,
                        font: '12px Arial',
                        fill: new ol.style.Fill({
                            color: colors.text.primary
                        }),
                        stroke: new ol.style.Stroke({
                            color: colors.textHalo.light,
                            width: 2
                        }),
                        overflow: true,
                        offsetY: -10
                    })
                }));
            }
        }
        
        // Boundaries
        else if (layer === 'boundary') {
            const boundaryType = feature.get('admin_level') === '2' ? 'national' : 'administrative';
            const boundaryColor = colors.boundary[boundaryType] || colors.boundary.administrative;
            
            styles.push(new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: boundaryColor,
                    width: 1,
                    lineDash: [4, 4]
                })
            }));
        }
        
        // Default style for any other features
        else {
            styles.push(new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(200, 200, 200, 0.3)'
                }),
                stroke: new ol.style.Stroke({
                    color: 'rgba(100, 100, 100, 0.5)',
                    width: 0.5
                })
            }));
        }
        
        return styles;
        
    } catch (error) {
        console.error('Error styling feature:', error);
        // Return a default style in case of errors
        return [new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'rgba(200, 200, 200, 0.3)'
            }),
            stroke: new ol.style.Stroke({
                color: 'rgba(100, 100, 100, 0.5)',
                width: 0.5
            })
        })];
    }
};

/**
 * Adjusts a color by a percentage (lightens or darkens)
 * @param {string} color - Hex color code
 * @param {number} percent - Positive to lighten, negative to darken
 * @returns {string} Adjusted color in hex format
 */
function adjustColor(color, percent) {
    // Convert hex to RGB
    const num = parseInt(color.replace('#', ''), 16);
    const amt = Math.round(2.55 * percent);
    const R = (num >> 16) + amt;
    const G = (num >> 8 & 0x00FF) + amt;
    const B = (num & 0x0000FF) + amt;

    // Ensure values are within bounds
    const clamp = (value) => Math.min(255, Math.max(0, value));
    
    // Convert back to hex
    return '#' + (
        0x1000000 +
        (clamp(R) << 16) +
        (clamp(G) << 8) +
        clamp(B)
    ).toString(16).slice(1);
}
